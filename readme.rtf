{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13560\viewh12160\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Conor Higgins\
112415582\
MScIM CS6102 Assignment - Turtle Fractals\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qj\partightenfactor0
\cf0 This assignment consists of two Python modules: one which holds the Tkinter control interface and Turtle figures, and one that holds a dictionary with information on each fractal.\
\
The personal figures used in the assignment are:\
1.	Cross built from a Koch-like semicircle curve - A Koch curve was created using a semicircle instead of a 60 degree angle. The curve was then called 4 times, combining them into a square with the curve circles on the outside.\
2.	Jigsaw built from a Koch-like semicircle curve - Similar to the \'93Cross\'94 figure, but the curve circles are now on the inside of the square.\
3.	Pythagoras Tree of variable angle - Creates a Pythagoras Tree of squares. The angle can be specified by the user to change the angle that the tree leans at.\
4.	A puzzle shape - A simple line was created with a right angle up and right angle down. 4 of these were joined together in a square shape to make a puzzle-like structure.\
5.	An H-Tree, that draws a maze-like structure - Creates a capital H, which recursively creates smaller capital H\'92s at the tips of the original.\
6.	A triple circular gasket - Creates a circular gasket with 3 inner circles.\
7.	A tree based on circles, that has two colour palettes; autumn and spring - Creates a tree with 3 branches 60 degrees apart, with circles as leaves. The circles\'92 colours are randomly generated each time the function is called, from 1 of 2 different colour palettes.\
\
The interface is laid out as follows:\
1.	An entry box to type in the desired figure order.\
2.	An entry box to type in the desired figure length.\
3.	An extra box for specifying additional features for certain fractals. The fractals that require this are: Gasket (Empty), Gasket (Filled), Pythagoras Tree and Seasonal Tree. Check their fractal information in the UI for details.\
4.	A \'93Draw\'94 button which calls the functions to be drawn to the window.\
5.	A \'93Clear Text\'94 button to clear the entry boxes.\
6.	A \'93Clear Screen\'94 button to clear the drawing screen and reset the Turtle position.\
7.	A selection drop-down menu to choose which fractal to draw.\
8.	A \'93Fractal Information\'94 button which displays information about the fractal, based on which one has been chosen in the selection menu.\
9.	A \'93Cursor Location\'94 button, which allows the user to change the location of the Turtle. Click on the button once, then click the screen in the location you would like the Turtle to begin drawing from.\
10.	A \'93Quit\'94 button which shuts down the program.\
11.	A text box which displays the fractal information when the \'93Fractal Information\'94 button is pressed.\
\
The optimal order to run the program is:\
1.	Run the module \'93turtleFigures.py\'94.\
2.	Select your desired fractal with the drop-down menu.\
3.	Press the \'93Fractal Information\'94 button to see info on the fractal.\
4.	Enter the order, length and extra information (if applicable).\
5.	Change the cursor location (if desired).\
6.	Press \'93Draw\'94.\
7.	Enjoy!\
\
Press \'93Quit\'94 when you are done to exit the program.}